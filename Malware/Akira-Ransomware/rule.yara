import "pe"

  

rule RANSOM_Akira_Windows_v3

{

meta:

description = "Detects Akira ransomware for Windows based on unique strings, ransom note artifacts, command-line arguments, and specific DLL imports identified in analysis reports."

author = "detections.ai"

date = "2025-08-19"

version = 3

reference = "https://www.huntress.com/blog/exploitation-of-sonicwall-vpn"

hash = "06c2a137c31aae5d02b4d7df61ffd31f1af9a9e59978f15b3f7265cc751bff1f"

hash = "aa1f4e8e7066b57f594ebed05e931932277c35495ba407f1f97675c6ce4be5cc"

hash = "fc2b499708b2d20545c140906b0484546c8b3ff21341b8a5acd18f2063fa2bb5"

hash = "d080f553c9b1276317441894ec6861573fa64fb1fae46165a55302e782b1614d"

hash = "1b153070934033deace7f04e77a72abe4e7e259271f885e25d81dc6337a9313d"

tags = "CRIME, RANSOMWARE, AKIRA, FILE"

mitre_attack = "T1486, T1490, T1562.001, T1027"

malware_family = "Akira"

malware_type = "Ransomware"

  

strings:

// Ransom note and file extension artifacts

$note = "akira_readme.txt" ascii wide

$ext1 = ".akira" ascii wide

$ext2 = ".arika" ascii wide // Variant mentioned in report

  

// Highly specific onion URLs from the report

$onion1 = "akiral2iz6a7qgd3ayp3l6yub7xx2uep76idk3u2kollpj5z3z636bad.onion" ascii

$onion2 = "akiralkzxzq2dsrzsrvbr2xgbbu2wgsmxryd4csgfameg52n7efvr2id.onion" ascii

  

// Excluded directory strings from analysis

$excl1 = "System Volume Information" ascii wide

$excl2 = "$Recycle.Bin" ascii wide

$excl3 = "Trend Micro" ascii wide

$excl4 = "Windows" ascii wide

$excl5 = "ProgramData" ascii wide

  

// Targeted file types for virtual machines

$target_vm1 = ".vmdk" ascii wide

$target_vm2 = ".vhdx" ascii wide

$target_vm3 = ".qcow2" ascii wide

$target_vm4 = ".vhd" ascii wide

$target_vm5 = ".iso" ascii wide

  

// Targeted file types for databases

$target_db1 = ".mdb" ascii wide

$target_db2 = ".mdf" ascii wide

$target_db3 = ".db" ascii wide

$target_db4 = ".sqlite" ascii wide

  

// Command-line argument and PowerShell artifacts

$arg_dellog = "-dellog" ascii

$ps_logclear = "GlobalSession.ClearLog" ascii wide

$ps_shadowcopy = "Get-WmiObject Win32_Shadowcopy" ascii wide // For shadow copy deletion

  

condition:

// Must be a 64-bit PE file as identified in the report

uint16(0) == 0x5a4d and pe.is_pe and pe.is_64bit()

and filesize < 5MB

  

// Check for key imported DLLs mentioned in the report's recommendations

and pe.imports("RstrtMgr.dll")

and pe.imports("WTSAPI32.dll")

  

// Require a combination of high-confidence strings to reduce potential FPs

and (

// High-confidence: ransom note, onion URL, or specific PowerShell command for shadow copy deletion

1 of ($note, $onion*) or $ps_shadowcopy

or

// High-confidence: specific log clearing artifacts

($arg_dellog and $ps_logclear)

or

// Medium-confidence: combination of extension, multiple exclusions, and a targeted file type (VM or DB)

// This combination reduces FPs that might arise from a generic extension alone.

(1 of ($ext*) and 2 of ($excl*) and 1 of ($target_*))

)

}
