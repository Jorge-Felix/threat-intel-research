import "pe"

rule MAL_PromptLock_LLM_Interaction
{
    meta:
        description = "Detects the PromptLock malware by identifying strings related to its interaction with local LLM APIs, such as Ollama, for dynamic script generation."
        author = "detections.ai"
        date = "2025-08-29"
        version = 1
        reference = "https://raw.githubusercontent.com/Jorge-Felix/threat-intel-research/refs/heads/main/Malware/prompt-lock/report.md"
        hash = "1458b6dc98a878f237bfb3c3f354ea6e12d76e340cefe55d6a1c9c7eb64c9aee"
        tags = "FILE, RANSOMWARE, PROMPTLOCK, GOLANG, LLM, OLLAMA"
        mitre_attack = "T1059, T1647"
        malware_family = "PromptLock"
        malware_type = "Ransomware"

    strings:
        // Key string indicating interaction with a local Ollama LLM endpoint.
        $ollama_endpoint = "/ollama/v1/chat/completions" ascii wide

        // Corroborating strings also found in PromptLock binaries.
        $session_key = "session_key=" ascii wide
        $gopherlua = "GopherLua" ascii wide
        $go_http = "Go-http-client/2.0" ascii wide

    condition:
        // Target PE files, likely Go binaries under 15MB.
        pe.is_pe
        and filesize < 15MB
        // Require the specific Ollama endpoint plus at least one other known PromptLock artifact.
        // This increases confidence and reduces the chance of FPs from legitimate tools that might also use Ollama.
        and $ollama_endpoint
        and 1 of ($session_key, $gopherlua, $go_http)
}
